[{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','0','391','0','Untitled-1',"import matplotlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Define the textures for each heuristic\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',     # Code Length\n    'Heuristic 2 Only': 'dashed',    # Code Similarity\n    'Heuristic 3 Only': 'dotted',   # Same Containment\n    'All Heuristics': 'dashdot'         # Combined\n}\ncolor_scheme = {\n# Define the colors for each p-value\n    'p=0': 'blue',\n    'p=0.5': 'green',\n    'p=1': 'orange'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\naccuracy_results_apache_lucene = {}\nrule_percentage_results__apache_lucene = {}\nconciseness_results__apache_lucene = {}\n\naccuracy_results_alibaba_nacos = {}\nrule_percentage_results__alibaba_nacos = {}\nconciseness_results__alibaba_nacos = {}\n\naccuracy_results_apache_dubbo = {}\nrule_percentage_results__apache_dubbo = {}\nconciseness_results__apache_dubbo = {}\n\naccuracy_results_presto = {}\nrule_percentage_results__presto = {}\nconciseness_results__presto = {}\n\n\n# Load the results from the CSV files\nfor filename in os.listdir('data'):\n    if filename.endswith('.csv'):\n        df = pd.read_csv(f'data/{filename}')\n\n        # columns Scenario,Probability,Iteration,Accuracy,Rule Percentage,Conciseness\n        for index, row in df.iterrows():\n            scenario = row['Scenario']\n            probability = row['Probability']\n            iteration = row['Iteration']\n            accuracy = row['Accuracy']\n            rule_percentage = row['Rule Percentage']\n            conciseness = row['Conciseness']\n\n            # if file name contains alibaba_nacos\n            if 'alibaba_nacos' in filename:\n                if scenario not in accuracy_results_alibaba_nacos:\n                    accuracy_results_alibaba_nacos[scenario] = {}\n                    rule_percentage_results__alibaba_nacos[scenario] = {}\n                    conciseness_results__alibaba_nacos[scenario] = {}\n\n                if probability not in accuracy_results_alibaba_nacos[scenario]:\n                    accuracy_results_alibaba_nacos[scenario][probability] = []\n                    rule_percentage_results__alibaba_nacos[scenario][probability] = []\n                    conciseness_results__alibaba_nacos[scenario][probability] = []\n\n                accuracy_results_alibaba_nacos[scenario][probability].append(accuracy)\n                rule_percentage_results__alibaba_nacos[scenario][probability].append(rule_percentage)\n                conciseness_results__alibaba_nacos[scenario][probability].append(conciseness)\n            \n            # if file name contains apache_dubbo\n            if 'apache_dubbo' in filename:\n                if scenario not in accuracy_results_apache_dubbo:\n                    accuracy_results_apache_dubbo[scenario] = {}\n                    rule_percentage_results__apache_dubbo[scenario] = {}\n                    conciseness_results__apache_dubbo[scenario] = {}\n\n                if probability not in accuracy_results_apache_dubbo[scenario]:\n                    accuracy_results_apache_dubbo[scenario][probability] = []\n                    rule_percentage_results__apache_dubbo[scenario][probability] = []\n                    conciseness_results__apache_dubbo[scenario][probability] = []\n\n                accuracy_results_apache_dubbo[scenario][probability].append(accuracy)\n                rule_percentage_results__apache_dubbo[scenario][probability].append(rule_percentage)\n                conciseness_results__apache_dubbo[scenario][probability].append(conciseness)\n            \n            # if file name contains apache_lucene\n            if 'apache_lucene' in filename:\n                if scenario not in accuracy_results_apache_lucene:\n                    accuracy_results_apache_lucene[scenario] = {}\n                    rule_percentage_results__apache_lucene[scenario] = {}\n                    conciseness_results__apache_lucene[scenario] = {}\n\n                if probability not in accuracy_results_apache_lucene[scenario]:\n                    accuracy_results_apache_lucene[scenario][probability] = []\n                    rule_percentage_results__apache_lucene[scenario][probability] = []\n                    conciseness_results__apache_lucene[scenario][probability] = []\n\n                accuracy_results_apache_lucene[scenario][probability].append(accuracy)\n                rule_percentage_results__apache_lucene[scenario][probability].append(rule_percentage)\n                conciseness_results__apache_lucene[scenario][probability].append(conciseness)\n\n            # if file name contains presto\n            if 'presto' in filename:\n                if scenario not in accuracy_results_presto:\n                    accuracy_results_presto[scenario] = {}\n                    rule_percentage_results__presto[scenario] = {}\n                    conciseness_results__presto[scenario] = {}\n\n                if probability not in accuracy_results_presto[scenario]:\n                    accuracy_results_presto[scenario][probability] = []\n                    rule_percentage_results__presto[scenario][probability] = []\n                    conciseness_results__presto[scenario][probability] = []\n\n                accuracy_results_presto[scenario][probability].append(accuracy)\n                rule_percentage_results__presto[scenario][probability].append(rule_percentage)\n                conciseness_results__presto[scenario][probability].append(conciseness)\n\nprint(\"Alibaba Nacos\")\nprint(accuracy_results_alibaba_nacos)\nprint(rule_percentage_results__alibaba_nacos)\nprint(conciseness_results__alibaba_nacos)\n\nprint(\"Apache Dubbo\")\nprint(accuracy_results_apache_dubbo)\nprint(rule_percentage_results__apache_dubbo)\nprint(conciseness_results__apache_dubbo)\n\nprint(\"Apache Lucene\")\nprint(accuracy_results_apache_lucene)\nprint(rule_percentage_results__apache_lucene)\nprint(conciseness_results__apache_lucene)\n\nprint(\"Presto\")\nprint(accuracy_results_presto)\nprint(rule_percentage_results__presto)\nprint(conciseness_results__presto)\n\n\n#plotting the results for Alibaba Nacos\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in accuracy_results_alibaba_nacos.items():\n    for probability, accuracies in probabilities.items():\n        ax.plot(accuracies, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Accuracy')\nplt.title('Alibaba Nacos')\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in rule_percentage_results__alibaba_nacos.items():\n    for probability, rule_percentages in probabilities.items():\n        ax.plot(rule_percentages, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Rule Percentage')\nplt.title('Alibaba Nacos')\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in conciseness_results__alibaba_nacos.items():\n    for probability, concisenesses in probabilities.items():\n        ax.plot(concisenesses, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Conciseness')\nplt.title('Alibaba Nacos')\nplt.legend()\nplt.show()\n\n#plotting the results for Apache Dubbo\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in accuracy_results_apache_dubbo.items():\n    for probability, accuracies in probabilities.items():\n        ax.plot(accuracies, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\n\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Accuracy')\nplt.title('Apache Dubbo')\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in rule_percentage_results__apache_dubbo.items():\n    for probability, rule_percentages in probabilities.items():\n        ax.plot(rule_percentages, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Rule Percentage')\nplt.title('Apache Dubbo')\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in conciseness_results__apache_dubbo.items():\n    for probability, concisenesses in probabilities.items():\n        ax.plot(concisenesses, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Conciseness')\nplt.title('Apache Dubbo')\nplt.legend()\nplt.show()\n\n#plotting the results for Apache Lucene\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in accuracy_results_apache_lucene.items():\n    for probability, accuracies in probabilities.items():\n        ax.plot(accuracies, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\n\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Accuracy')\nplt.title('Apache Lucene')\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in rule_percentage_results__apache_lucene.items():\n    for probability, rule_percentages in probabilities.items():\n        ax.plot(rule_percentages, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Rule Percentage')\nplt.title('Apache Lucene')\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in conciseness_results__apache_lucene.items():\n    for probability, concisenesses in probabilities.items():\n        ax.plot(concisenesses, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Conciseness')\nplt.title('Apache Lucene')\nplt.legend()\nplt.show()\n\n#plotting the results for Presto\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in accuracy_results_presto.items():\n    for probability, accuracies in probabilities.items():\n        ax.plot(accuracies, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\n\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Accuracy')\nplt.title('Presto')\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in rule_percentage_results__presto.items():\n    for probability, rule_percentages in probabilities.items():\n        ax.plot(rule_percentages, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Rule Percentage')\nplt.title('Presto')\nplt.legend()\nplt.show()\n\nfig, ax = plt.subplots()\n# use color and texture scheme\nfor scenario, probabilities in conciseness_results__presto.items():\n    for probability, concisenesses in probabilities.items():\n        ax.plot(concisenesses, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\nplt.grid()\nplt.xlabel('Iteration')\nplt.ylabel('Conciseness')\nplt.title('Presto')\nplt.legend()\nplt.show()\n\n\n# 4x3\n\nfig, axs = plt.subplots(4, 3, figsize=(15, 15))\n\n# Alibaba Nacos\nfor i, (scenario, probabilities) in enumerate(accuracy_results_alibaba_nacos.items()):\n    for j, (probability, accuracies) in enumerate(probabilities.items()):\n        axs[0, 0].plot(accuracies, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[0, 0].grid()\naxs[0, 0].set_title('Alibaba Nacos - Accuracy')\naxs[0, 0].legend()\n\nfor i, (scenario, probabilities) in enumerate(rule_percentage_results__alibaba_nacos.items()):\n    for j, (probability, rule_percentages) in enumerate(probabilities.items()):\n        axs[0, 1].plot(rule_percentages, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[0, 1].grid()\naxs[0, 1].set_title('Alibaba Nacos - Rule Percentage')\naxs[0, 1].legend()\n\nfor i, (scenario, probabilities) in enumerate(conciseness_results__alibaba_nacos.items()):\n    for j, (probability, concisenesses) in enumerate(probabilities.items()):\n        axs[0, 2].plot(concisenesses, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[0, 2].grid()\naxs[0, 2].set_title('Alibaba Nacos - Conciseness')\naxs[0, 2].legend()\n\n# Apache Dubbo\nfor i, (scenario, probabilities) in enumerate(accuracy_results_apache_dubbo.items()):\n    for j, (probability, accuracies) in enumerate(probabilities.items()):\n        axs[1, 0].plot(accuracies, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[1, 0].grid()\naxs[1, 0].set_title('Apache Dubbo - Accuracy')\naxs[1, 0].legend()\n\nfor i, (scenario, probabilities) in enumerate(rule_percentage_results__apache_dubbo.items()):\n    for j, (probability, rule_percentages) in enumerate(probabilities.items()):\n        axs[1, 1].plot(rule_percentages, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[1, 1].grid()\naxs[1, 1].set_title('Apache Dubbo - Rule Percentage')\naxs[1, 1].legend()\n\nfor i, (scenario, probabilities) in enumerate(conciseness_results__apache_dubbo.items()):\n    for j, (probability, concisenesses) in enumerate(probabilities.items()):\n        axs[1, 2].plot(concisenesses, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[1, 2].grid()\naxs[1, 2].set_title('Apache Dubbo - Conciseness')\naxs[1, 2].legend()\n\n# Apache Lucene\nfor i, (scenario, probabilities) in enumerate(accuracy_results_apache_lucene.items()):\n    for j, (probability, accuracies) in enumerate(probabilities.items()):\n        axs[2, 0].plot(accuracies, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[2, 0].grid()\naxs[2, 0].set_title('Apache Lucene - Accuracy')\naxs[2, 0].legend()\n\nfor i, (scenario, probabilities) in enumerate(rule_percentage_results__apache_lucene.items()):\n    for j, (probability, rule_percentages) in enumerate(probabilities.items()):\n        axs[2, 1].plot(rule_percentages, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[2, 1].grid()\naxs[2, 1].set_title('Apache Lucene - Rule Percentage')\naxs[2, 1].legend()\n\nfor i, (scenario, probabilities) in enumerate(conciseness_results__apache_lucene.items()):\n    for j, (probability, concisenesses) in enumerate(probabilities.items()):\n        axs[2, 2].plot(concisenesses, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[2, 2].grid()\naxs[2, 2].set_title('Apache Lucene - Conciseness')\naxs[2, 2].legend()\n\n# Presto\nfor i, (scenario, probabilities) in enumerate(accuracy_results_presto.items()):\n    for j, (probability, accuracies) in enumerate(probabilities.items()):\n        axs[3, 0].plot(accuracies, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[3, 0].grid()\naxs[3, 0].set_title('Presto - Accuracy')\naxs[3, 0].legend()\n\nfor i, (scenario, probabilities) in enumerate(rule_percentage_results__presto.items()):\n    for j, (probability, rule_percentages) in enumerate(probabilities.items()):\n        axs[3, 1].plot(rule_percentages, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[3, 1].grid()\naxs[3, 1].set_title('Presto - Rule Percentage')\naxs[3, 1].legend()\n\nfor i, (scenario, probabilities) in enumerate(conciseness_results__presto.items()):\n    for j, (probability, concisenesses) in enumerate(probabilities.items()):\n        axs[3, 2].plot(concisenesses, label=f'{scenario} - {probability}', color=color_scheme[probability], linestyle=texture_scheme[scenario])\naxs[3, 2].grid()\naxs[3, 2].set_title('Presto - Conciseness')\naxs[3, 2].legend()\n\nplt.show()\n\n# save image to file\nfig.savefig('results.pdf')\n\n"],time:'2024-09-10T01:56:40.667Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['360','0','391','0','Untitled-1'],time:'2024-09-10T01:56:40.667Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['353','0','384','18','Untitled-1'],time:'2024-09-10T01:56:40.667Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','0','391','0','Untitled-1',''],time:'2024-09-10T01:56:42.457Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','0','0','0','Untitled-1',''],time:'2024-09-10T01:56:42.549Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['0','0','0','0','Untitled-1'],time:'2024-09-10T01:56:42.549Z'},{src:'onDidChangeActiveTextEditor',msg:'Current editor: [%s]; Previous editor: [%s]',prm:['','untitled:Untitled-1'],time:'2024-09-10T01:56:42.564Z'},{src:'onDidChangeActiveTextEditor',msg:'Current editor: [%s]; Previous editor: [%s]',prm:['/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-10T01:56:42.580Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','0','0','0','git/scm0/input','p'],time:'2024-09-10T02:00:54.011Z'}]
[{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','0','115','0','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"import matplotlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobabilities = [0, 0.5, 1]\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    0: 'blue',\n    0.5: 'green',\n    1: 'orange'\n}\n\n# Plot the averages for each heuristic\nfor heuristic, avg_df in averaged_results.items():\n    fig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        for probability in probabilities:\n            df_filtered = avg_df[(avg_df['Scenario'] == scenario) & (avg_df['Probability'] == probability)]\n            axs[0].plot(df_filtered['Iteration'], df_filtered['Accuracy'], label=f'{scenario}, p={probability}', \n                        color=color_scheme[probability], linestyle=texture_scheme[scenario])\n    axs[0].set_title(f'Accuracy ({heuristic})')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        for probability in probabilities:\n            df_filtered = avg_df[(avg_df['Scenario'] == scenario) & (avg_df['Probability'] == probability)]\n            axs[1].plot(df_filtered['Iteration'], df_filtered['Rule Percentage'], label=f'{scenario}, p={probability}', \n                        color=color_scheme[probability], linestyle=texture_scheme[scenario])\n    axs[1].set_title(f'Rule Percentage ({heuristic})')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        for probability in probabilities:\n            df_filtered = avg_df[(avg_df['Scenario'] == scenario) & (avg_df['Probability'] == probability)]\n            axs[2].plot(df_filtered['Iteration'], df_filtered['Conciseness'], label=f'{scenario}, p={probability}', \n                        color=color_scheme[probability], linestyle=texture_scheme[scenario])\n    axs[2].set_title(f'Conciseness ({heuristic})')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\n    plt.tight_layout()\n    plt.show()\n\n    # Save the plots as PDF if needed\n    fig.savefig(f'{heuristic}_results_plot.pdf')\n\n# Optional: Save the averaged results to CSVs\nfor heuristic, avg_df in averaged_results.items():\n    avg_df.to_csv(f'data/{heuristic}_averaged_results.csv', index=False)\n"],time:'2024-09-12T00:08:56.612Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','0','115','0','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"import matplotlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'code/data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')\n"],time:'2024-09-12T00:08:56.986Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['115','0','115','0','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:08:56.991Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['29','63','29','63','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:08:58.148Z'},{src:'onDidChangeActiveTextEditor',msg:'Current editor: [%s]; Previous editor: [%s]',prm:['','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb'],time:'2024-09-12T00:08:58.353Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['39','21','39','21','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:08:58.406Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['29','63','29','63','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:02.681Z'},{src:'onDidChangeActiveTextEditor',msg:'Current editor: [%s]; Previous editor: [%s]',prm:['/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:02.885Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['115','0','115','0','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:02.888Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['29','63','29','63','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:03.481Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['16','17','16','17','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:05.325Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['16','16','16','20','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','code'],time:'2024-09-12T00:09:05.456Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['16','16','16','20','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:06.234Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['16','16','16','16','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:06.236Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['16','17','16','17','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:06.402Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['16','16','16','17','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:06.541Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['16','16','16','16','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:06.542Z'},{src:'onDidChangeActiveTextEditor',msg:'Current editor: [%s]; Previous editor: [%s]',prm:['','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb'],time:'2024-09-12T00:09:14.402Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['40','38','40','38','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:17.494Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['0','0','66','16','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb'],time:'2024-09-12T00:09:23.421Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['57','48','57','48','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:23.435Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['39','18','39','70','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"df_results.groupby(['Dataset']).mean().reset_index()"],time:'2024-09-12T00:09:24.930Z'},{src:'onDidChangeActiveTextEditor',msg:'Current editor: [%s]; Previous editor: [%s]',prm:['/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T00:09:33.874Z'}]
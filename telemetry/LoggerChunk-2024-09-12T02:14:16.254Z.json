[{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['114','57','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:22.441Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['114','56','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',')'],time:'2024-09-12T02:14:22.705Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['114','55','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"')"],time:'2024-09-12T02:14:22.722Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['114','54','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"f')"],time:'2024-09-12T02:14:22.739Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['114','53','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"df')"],time:'2024-09-12T02:14:22.756Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['113','32','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.775Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['112','0','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.822Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['111','10','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.838Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['110','18','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.855Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['109','0','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.872Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['108','19','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.888Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['106','34','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.905Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['104','31','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"enario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.921Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['101','29','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',":\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.937Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['100','22','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.954Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['98','19','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.971Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['94','23','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"el=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:22.988Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['89','0','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:23.004Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['84','21','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"abel=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:23.023Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['84','14','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"      label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:23.872Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['85','14','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:23.905Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['86','15','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:23.938Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['87','18','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"bel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:23.971Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['87','19','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"el('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:23.987Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['89','0','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.005Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['91','22','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"enarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.021Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['93','23','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"nario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.038Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['94','23','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"el=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.054Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['94','24','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"l=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.070Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['95','24','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"le Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.121Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['94','25','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.390Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['86','25','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"eration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.513Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['78','25','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.571Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['70','25','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb'," across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.741Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['70','24','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.763Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['62','1','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:24.987Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['29','24','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"ess = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:26.008Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['12','23','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"cos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:26.339Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['12','21','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:26.359Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['12','20','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:26.372Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['12','19','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"a_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:26.388Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['29','63','29','63','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:26.608Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','0','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"import matplotlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.381Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','13','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"tlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.642Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','12','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"otlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.671Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','11','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"lotlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.688Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','10','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"plotlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.704Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','10','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"das as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.721Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','9','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"ndas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.738Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','7','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.772Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','6','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb'," pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.788Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','5','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"t pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.805Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','4','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"rt pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.837Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','3','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"ort pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.854Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','2','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"port pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.871Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['1','1','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"mport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:27.922Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','0','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',"import matplotlib.pyplot as plt\nimport pandas as pd\nimport os\n\n# Initialize the result structure for each heuristic\nheuristics_range = range(1, 5)  # Heuristic 1 to 4\ndatasets = ['alibaba_nacos']\nscenarios = ['Heuristic 1 Only', 'Heuristic 2 Only', 'Heuristic 3 Only', 'All Heuristics']\nprobability_of_interest = 0.5\niterations = range(0, 24)  # Example: 24 iterations\n\n# Initialize a data structure to store the accumulated results\nresults = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\n# Loop through each run and accumulate the values\nfor run in range(1, 11):\n    run_dir = f'data/{run}/'  # Assuming the data for each run is in 'code/data/1', 'code/data/2', etc.\n\n    for filename in os.listdir(run_dir):\n        if filename.endswith('.csv') and 'alibaba_nacos' in filename:\n            df = pd.read_csv(os.path.join(run_dir, filename))\n\n            # Parse the file and accumulate results by scenario, probability, iteration\n            for index, row in df.iterrows():\n                scenario = row['Scenario']\n                probability = row['Probability']\n                iteration = row['Iteration']\n                accuracy = row['Accuracy']\n                rule_percentage = row['Rule Percentage']\n                conciseness = row['Conciseness']\n\n                # Accumulate the results for the current scenario, probability, and iteration\n                for i in heuristics_range:\n                    current_dataset = f'alibaba_nacos_h={i}'\n                    if current_dataset in filename:\n                        results[current_dataset].append({\n                            'Scenario': scenario,\n                            'Probability': probability,\n                            'Iteration': iteration,\n                            'Accuracy': accuracy,\n                            'Rule Percentage': rule_percentage,\n                            'Conciseness': conciseness\n                        })\n\n# Now calculate the averages across runs\naveraged_results = {f'alibaba_nacos_h={i}': [] for i in heuristics_range}\n\nfor heuristic, records in results.items():\n    df = pd.DataFrame(records)\n    \n    # Group by Scenario, Probability, and Iteration to calculate the averages\n    averaged_df = df.groupby(['Scenario', 'Probability', 'Iteration']).mean().reset_index()\n\n    # Store the results back for each heuristic\n    averaged_results[heuristic] = averaged_df\n\n# Plotting setup\ntexture_scheme = {\n    'Heuristic 1 Only': 'solid',\n    'Heuristic 2 Only': 'dashed',\n    'Heuristic 3 Only': 'dotted',\n    'All Heuristics': 'dashdot'\n}\ncolor_scheme = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'red'\n}\n\n# Combined plot for p=0.5 across all heuristics\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\nfor i in heuristics_range:\n    heuristic = f'alibaba_nacos_h={i}'\n    avg_df = averaged_results[heuristic]\n\n    # Filter only for p=0.5\n    df_filtered = avg_df[avg_df['Probability'] == probability_of_interest]\n\n    # Plot Accuracy\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[0].plot(scenario_filtered['Iteration'], scenario_filtered['Accuracy'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[0].set_title('Accuracy (p=0.5)')\n    axs[0].set_xlabel('Iteration')\n    axs[0].set_ylabel('Average Accuracy')\n    axs[0].legend()\n\n    # Plot Rule Percentage\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[1].plot(scenario_filtered['Iteration'], scenario_filtered['Rule Percentage'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[1].set_title('Rule Percentage (p=0.5)')\n    axs[1].set_xlabel('Iteration')\n    axs[1].set_ylabel('Average Rule Percentage')\n    axs[1].legend()\n\n    # Plot Conciseness\n    for scenario in scenarios:\n        scenario_filtered = df_filtered[df_filtered['Scenario'] == scenario]\n        axs[2].plot(scenario_filtered['Iteration'], scenario_filtered['Conciseness'], \n                    label=f'{scenario} (Heuristic {i})', color=color_scheme[i], linestyle=texture_scheme[scenario])\n    axs[2].set_title('Conciseness (p=0.5)')\n    axs[2].set_xlabel('Iteration')\n    axs[2].set_ylabel('Average Conciseness')\n    axs[2].legend()\n\nplt.tight_layout()\nplt.show()\n\n# Save the plot as PDF if needed\nfig.savefig('combined_heuristics_p_0_5_results_plot.pdf')"],time:'2024-09-12T02:14:28.221Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','0','114','57','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:29.585Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['0','0','1','0','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb'],time:'2024-09-12T02:14:29.586Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','0','0','0','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:29.590Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','0','0','0','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','#'],time:'2024-09-12T02:14:35.497Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','1','0','1','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:35.499Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','1','0','1','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','n'],time:'2024-09-12T02:14:35.758Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','2','0','2','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:35.767Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','2','0','2','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',' '],time:'2024-09-12T02:14:35.776Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','3','0','3','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:35.779Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','2','0','3','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:36.376Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','2','0','2','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:36.378Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','1','0','2','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:36.540Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','1','0','1','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:36.544Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','1','0','1','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',' '],time:'2024-09-12T02:14:36.841Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','2','0','2','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:36.846Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','2','0','2','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','1'],time:'2024-09-12T02:14:39.344Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','3','0','3','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:39.346Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','3','0','3','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','x'],time:'2024-09-12T02:14:40.011Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','4','0','4','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:40.013Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','4','0','4','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','3'],time:'2024-09-12T02:14:40.263Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','5','0','5','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:40.265Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','5','0','5','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',' '],time:'2024-09-12T02:14:40.338Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','6','0','6','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:40.339Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','6','0','6','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','p'],time:'2024-09-12T02:14:41.792Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','7','0','7','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:41.794Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','7','0','7','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','l'],time:'2024-09-12T02:14:41.998Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','8','0','8','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:42.000Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','8','0','8','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','o'],time:'2024-09-12T02:14:42.197Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','9','0','9','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:42.199Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','9','0','9','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','t'],time:'2024-09-12T02:14:42.413Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','10','0','10','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:42.414Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','10','0','10','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','s'],time:'2024-09-12T02:14:42.704Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','11','0','11','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:42.705Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','11','0','11','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',' '],time:'2024-09-12T02:14:42.779Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','12','0','12','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:42.780Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','12','0','12','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','f'],time:'2024-09-12T02:14:43.018Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','13','0','13','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:43.019Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','13','0','13','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','o'],time:'2024-09-12T02:14:43.135Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','14','0','14','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:43.135Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','14','0','14','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb','r'],time:'2024-09-12T02:14:43.266Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','15','0','15','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:43.267Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','15','0','15','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',' '],time:'2024-09-12T02:14:43.361Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['0','16','0','16','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:43.363Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','15','0','16','/Users/burakyetistiren/Desktop/warning_suppression/code/plot.ipynb',''],time:'2024-09-12T02:14:49.216Z'}]
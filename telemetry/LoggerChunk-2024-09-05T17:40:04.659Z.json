[{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['224','0','250','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:04.992Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['225','0','251','24','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.008Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['227','0','253','21','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.025Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['230','0','255','55','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.042Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['233','0','258','26','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.058Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['236','0','261','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.075Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['239','0','265','47','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.092Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['244','0','269','48','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.108Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['249','0','274','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.125Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['253','0','279','61','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.142Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['258','0','283','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.158Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['262','0','287','28','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.175Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['266','0','292','80','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.192Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['271','0','296','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.209Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['275','0','300','68','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.226Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['278','0','304','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.242Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['282','0','307','91','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.259Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['285','0','310','68','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.276Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['288','0','313','55','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.292Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['291','0','316','107','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.309Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['293','0','319','92','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.333Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['295','0','321','88','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.343Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['298','0','323','48','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.359Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['299','0','325','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.376Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['301','0','327','86','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.392Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['303','0','328','41','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.409Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['304','0','330','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.426Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['306','0','331','59','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.442Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['307','0','332','80','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.459Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['308','0','333','40','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.475Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['309','0','334','111','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.492Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['310','0','335','89','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.509Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['311','0','336','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.525Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['312','0','337','96','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.541Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['312','0','338','53','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.559Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['313','0','339','92','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.575Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['314','0','339','92','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.592Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['314','0','340','43','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.609Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['315','0','340','43','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.625Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['315','0','341','52','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.642Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['316','0','341','52','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.658Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['316','0','342','64','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.675Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['317','0','342','64','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.692Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['317','0','343','21','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.725Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['318','0','343','21','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.742Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['318','0','344','161','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.775Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['319','0','345','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.859Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['321','0','347','69','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.875Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['324','0','350','57','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.892Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['328','0','353','64','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.909Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['333','0','358','61','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.925Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['338','0','364','48','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.942Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['344','0','369','70','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.959Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['349','0','375','94','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.975Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['355','0','380','71','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:05.992Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['360','0','385','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.009Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['365','0','391','54','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.025Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['370','0','396','18','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.042Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['375','0','400','1','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.059Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['379','0','405','42','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.075Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['383','0','409','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.092Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['387','0','412','57','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.109Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['390','0','416','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.125Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['391','0','416','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.573Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['391','0','417','67','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.592Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['393','0','419','46','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.609Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['395','0','420','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.626Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['397','0','422','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.642Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['399','0','425','79','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.659Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['402','0','428','10','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.675Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['406','0','431','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.702Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['409','0','435','46','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.709Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['413','0','438','47','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.742Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['417','0','442','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.759Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['420','0','446','12','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.776Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['424','0','449','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.792Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['427','0','453','55','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.809Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['431','0','456','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.825Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['434','0','459','46','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.842Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['434','0','460','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.909Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['435','0','460','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.926Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['435','0','461','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.941Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['436','0','461','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.959Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['437','0','462','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.975Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['437','0','463','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:06.992Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['438','0','464','25','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.008Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['439','0','464','25','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.025Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['440','0','465','82','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.042Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['441','0','466','12','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.059Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['442','0','468','10','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.075Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['443','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.092Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['445','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.109Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['446','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.125Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['447','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.142Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['448','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.159Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['450','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.175Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['451','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.192Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['452','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.209Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['453','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.225Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['454','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.259Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['455','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.325Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['456','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.359Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['457','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.375Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['459','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.392Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['460','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.409Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['462','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.425Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['463','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.442Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['464','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:07.475Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['469','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',''],time:'2024-09-05T17:40:07.824Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['467','14','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py','\nplt.show()\n'],time:'2024-09-05T17:40:08.062Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['465','18','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"ness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.077Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['463','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.111Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['462','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.126Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['461','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.129Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['460','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.142Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['459','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.146Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['455','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.159Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['454','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.164Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['450','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.175Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['449','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.181Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['445','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.192Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['444','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.195Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['440','0','466','12','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.209Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['439','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.213Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['435','0','461','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.225Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['435','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.229Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['431','0','456','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.242Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['430','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.246Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['426','0','451','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.258Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['425','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.264Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['421','0','446','12','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.276Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['420','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.279Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['415','0','441','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.292Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['414','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.296Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['411','0','436','34','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.308Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['410','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.312Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['406','0','431','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.325Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['405','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.329Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['401','0','426','12','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.342Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['400','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.345Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['396','0','421','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.358Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['395','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.362Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['391','0','416','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.375Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['390','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.379Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['385','0','411','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.393Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['384','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.399Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['380','0','405','42','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.410Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['379','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.416Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['374','0','400','1','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.429Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['373','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.436Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['370','0','396','18','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.443Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['369','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.449Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['365','0','391','54','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.460Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['365','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.465Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['359','0','384','80','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.482Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['358','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.488Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['354','0','380','71','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.498Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['354','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.502Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['352','0','377','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.517Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['351','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.522Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['351','0','376','86','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.526Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['350','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.530Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['350','0','376','86','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:08.542Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['349','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.545Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['352','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'," neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.559Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['354','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'," output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.576Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['357','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.592Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['359','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.609Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['362','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.626Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['364','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.642Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['366','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.659Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['367','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"         conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.676Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['368','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.692Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['369','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.709Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['370','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.726Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['371','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"         rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.792Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['372','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.943Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['373','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"         rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.959Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['374','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.976Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['375','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:08.993Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['376','11','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"     conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            print(warnings_state)\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:09.026Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['359','0','384','80','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:10.759Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['367','0','392','46','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:10.792Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['373','0','398','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:10.826Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','385','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',''],time:'2024-09-05T17:40:11.514Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['364','0','390','53','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:12.154Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['356','0','381','76','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:12.210Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['348','0','373','39','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:12.474Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['339','0','365','91','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:12.577Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['331','0','356','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:12.860Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['323','0','348','157','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:13.266Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['314','0','340','43','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:13.308Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['309','0','334','111','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:13.359Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['300','0','326','32','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:13.627Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['292','0','317','85','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:13.659Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['284','0','309','28','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:13.871Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['292','0','317','85','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.028Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['300','0','326','32','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.109Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['306','0','331','59','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.125Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['317','0','342','64','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.159Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['331','0','356','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.209Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['345','0','370','33','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.259Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['361','0','387','44','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.292Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['370','0','395','38','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.640Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['378','0','404','38','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.662Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['389','0','415','39','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.676Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['403','0','429','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:14.692Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['395','0','420','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:16.364Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['386','0','412','57','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:16.843Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['378','0','404','38','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:16.909Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','386','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py','\n'],time:'2024-09-05T17:40:18.874Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','387','3','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py','\n\n# D'],time:'2024-09-05T17:40:18.893Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','387','4','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py','\n\n# De'],time:'2024-09-05T17:40:18.910Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','389','4','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py','\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    '],time:'2024-09-05T17:40:18.927Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','390','5','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    '"],time:'2024-09-05T17:40:18.943Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','392','6','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'A"],time:'2024-09-05T17:40:18.976Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','395','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define "],time:'2024-09-05T17:40:18.993Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','399','12','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': '"],time:'2024-09-05T17:40:19.010Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','402','14','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heur"],time:'2024-09-05T17:40:19.026Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','403','15','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names"],time:'2024-09-05T17:40:19.043Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','403','16','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names "],time:'2024-09-05T17:40:19.059Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','404','16','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1"],time:'2024-09-05T17:40:19.076Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','404','17','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 "],time:'2024-09-05T17:40:19.126Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['379','0','404','38','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.142Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','405','17','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 "],time:'2024-09-05T17:40:19.145Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['380','0','405','42','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.159Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','406','43','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',"],time:'2024-09-05T17:40:19.161Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['381','0','406','43','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.175Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','407','32','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'"],time:'2024-09-05T17:40:19.178Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['383','0','408','1','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.192Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','409','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n"],time:'2024-09-05T17:40:19.195Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['387','0','412','57','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.209Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','413','17','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, "],time:'2024-09-05T17:40:19.212Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['392','0','417','67','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.225Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','418','17','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color"],time:'2024-09-05T17:40:19.229Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['397','0','423','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.242Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','424','26','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')"],time:'2024-09-05T17:40:19.246Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['402','0','428','10','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.259Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','429','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:19.262Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['408','0','433','59','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.275Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','434','17','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot("],time:'2024-09-05T17:40:19.279Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['415','0','440','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.292Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','441','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )"],time:'2024-09-05T17:40:19.297Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['423','0','449','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.309Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','450','68','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities"],time:'2024-09-05T17:40:19.314Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['433','0','458','47','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.325Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','459','22','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle="],time:'2024-09-05T17:40:19.331Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['442','0','467','14','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.342Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','468','10','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()"],time:'2024-09-05T17:40:19.346Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['452','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.358Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Define the color scheme for each heuristic\ncolor_scheme = {\n    'Heuristic 1 Only': 'blue',     # Code Length\n    'Heuristic 2 Only': 'green',    # Code Similarity\n    'Heuristic 3 Only': 'orange',   # Same Containment\n    'All Heuristics': 'red'         # Combined\n}\n\n# Define the textures for each p-value\ntexture_scheme = {\n    'p=0': 'solid',\n    'p=0.5': 'dashed',\n    'p=1': 'dotted'\n}\n\n# Updated heuristic names\nheuristic_names = {\n    'Heuristic 1 Only': 'Code Length',\n    'Heuristic 2 Only': 'Code Similarity',\n    'Heuristic 3 Only': 'Same Containment',\n    'All Heuristics': 'Combined'\n}\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(\n            range(len(accuracy_list)), \n            accuracy_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(\n            range(len(rule_percentage_list)), \n            rule_percentage_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(\n            range(len(conciseness_list)), \n            conciseness_list, \n            label=f'{heuristic_names[scenario_name]} - {p_value}', \n            color=color_scheme[scenario_name], \n            linestyle=texture_scheme[p_value],\n            marker='o'\n        )\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:19.361Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['462','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.375Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['469','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:19.392Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['461','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:21.460Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['453','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:21.492Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['444','0','469','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:21.675Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['436','0','462','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:21.709Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['431','0','456','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:21.759Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['422','0','448','10','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:22.042Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['414','0','439','46','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:22.059Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['406','0','431','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:22.092Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['392','0','417','67','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:22.125Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['379','0','462','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n"],time:'2024-09-05T17:40:24.544Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['416','0','423','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:24.555Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['392','0','417','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:24.555Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['162','0','239','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"    # Navigate through the JSON structure\n    # Assuming 'Call' is always present and has at least one element\n    calls = data.get(\"Call\", [])\n    if calls:\n        # Assuming 'Witnesses' is always present in the last element of 'Call' and has at least one element\n        last_call = calls[-1]\n        witnesses = last_call.get(\"Witnesses\", [])\n        if witnesses:\n            # Get the last 'Witnesses' entry\n            last_witness = witnesses[-1]\n            # Return the 'Value' list from the last 'Witnesses' entry\n            return last_witness.get(\"Value\", [])\n    return []\n\ndef extract_summary_rules(clingo_output):\n    # a summary rule is one prefixed by rule_contains(number)\n    summary_rules_by_prefix = defaultdict(list)\n    for line in clingo_output:\n        if line.startswith('rule_contains'):\n\n            number_str = line.split('(')[0].split('rule_contains')[1]\n            number = int(number_str) if number_str.isdigit() else 0\n\n            rule = line.split('(')[1].split(')')[0]\n            summary_rules_by_prefix[number].append(rule)\n    return summary_rules_by_prefix\n\ndef calculate_rule_percentage(clingo_output, positive_predictions):\n    summary_rules_by_prefix = defaultdict(list)\n    rule_percentages = {}\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            number_str = line.split('(')[0].split('rule_predict_pos')[1]\n            if number_str == '':\n                number_str = '0'\n            number = int(number_str)\n            warning_number = line.split('(')[1].split(')')[0]\n            summary_rules_by_prefix[number].append(warning_number)\n    for rule_number, matched_warnings in summary_rules_by_prefix.items():\n        rule_percentages[rule_number] = len(set(matched_warnings) & set(positive_predictions)) / len(set(matched_warnings))\n    return rule_percentages\n\ndef number_of_rules_over_percentage(percentages, percentage_threshold=0.8):\n    return sum(1 for p in percentages.values() if p >= percentage_threshold)\n\ndef get_number_of_positive_predictions(clingo_output):\n    positive_predictions = set()\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            warning_number = line.split('(')[1].split(')')[0]\n            positive_predictions.add(warning_number)\n    return len(positive_predictions)\n\n\ndef get_positive_predictions(clingo_output, rule_numbers):\n    # rule_predict_pos<number>(<warning>)\n    positive_predictions = []\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            number_str = line.split('(')[0].split('rule_predict_pos')[1]\n            number = int(number_str) if number_str.isdigit() else 0\n            if number not in rule_numbers:\n                continue\n            # extract warning from parenthesis\n            warning = line.split('(')[1].split(')')[0]\n            if warning not in ground_truth:\n                continue\n            positive_predictions.append(warning)\n    return positive_predictions\n\ndef get_positive_predictions_of_rule(clingo_output, rule_number):\n    # rule_predict_pos<number>(<warning>)\n    positive_predictions = []\n    for line in clingo_output:\n        matches_rule = line.startswith(f'rule_predict_pos{rule_number}') if rule_number != 0 else line.startswith('rule_predict_pos')\n        if matches_rule:\n            # extract warning from parenthesis\n            warning = line.split('(')[1].split(')')[0]\n            if warning not in ground_truth:\n                continue\n"],time:'2024-09-05T17:40:27.177Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['419','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:27.180Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['392','0','417','55','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:27.180Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['400','0','425','10','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:27.942Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['408','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:27.959Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['417','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:27.976Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['426','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:27.992Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['162','0','239','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py.git',"    # Navigate through the JSON structure\n    # Assuming 'Call' is always present and has at least one element\n    calls = data.get(\"Call\", [])\n    if calls:\n        # Assuming 'Witnesses' is always present in the last element of 'Call' and has at least one element\n        last_call = calls[-1]\n        witnesses = last_call.get(\"Witnesses\", [])\n        if witnesses:\n            # Get the last 'Witnesses' entry\n            last_witness = witnesses[-1]\n            # Return the 'Value' list from the last 'Witnesses' entry\n            return last_witness.get(\"Value\", [])\n    return []\n\ndef extract_summary_rules(clingo_output):\n    # a summary rule is one prefixed by rule_contains(number)\n    summary_rules_by_prefix = defaultdict(list)\n    for line in clingo_output:\n        if line.startswith('rule_contains'):\n\n            number_str = line.split('(')[0].split('rule_contains')[1]\n            number = int(number_str) if number_str.isdigit() else 0\n\n            rule = line.split('(')[1].split(')')[0]\n            summary_rules_by_prefix[number].append(rule)\n    return summary_rules_by_prefix\n\ndef calculate_rule_percentage(clingo_output, positive_predictions):\n    summary_rules_by_prefix = defaultdict(list)\n    rule_percentages = {}\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            number_str = line.split('(')[0].split('rule_predict_pos')[1]\n            if number_str == '':\n                number_str = '0'\n            number = int(number_str)\n            warning_number = line.split('(')[1].split(')')[0]\n            summary_rules_by_prefix[number].append(warning_number)\n    for rule_number, matched_warnings in summary_rules_by_prefix.items():\n        rule_percentages[rule_number] = len(set(matched_warnings) & set(positive_predictions)) / len(set(matched_warnings))\n    return rule_percentages\n\ndef number_of_rules_over_percentage(percentages, percentage_threshold=0.8):\n    return sum(1 for p in percentages.values() if p >= percentage_threshold)\n\ndef get_number_of_positive_predictions(clingo_output):\n    positive_predictions = set()\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            warning_number = line.split('(')[1].split(')')[0]\n            positive_predictions.add(warning_number)\n    return len(positive_predictions)\n\n\ndef get_positive_predictions(clingo_output, rule_numbers):\n    # rule_predict_pos<number>(<warning>)\n    positive_predictions = []\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            number_str = line.split('(')[0].split('rule_predict_pos')[1]\n            number = int(number_str) if number_str.isdigit() else 0\n            if number not in rule_numbers:\n                continue\n            # extract warning from parenthesis\n            warning = line.split('(')[1].split(')')[0]\n            if warning not in ground_truth:\n                continue\n            positive_predictions.append(warning)\n    return positive_predictions\n\ndef get_positive_predictions_of_rule(clingo_output, rule_number):\n    # rule_predict_pos<number>(<warning>)\n    positive_predictions = []\n    for line in clingo_output:\n        matches_rule = line.startswith(f'rule_predict_pos{rule_number}') if rule_number != 0 else line.startswith('rule_predict_pos')\n        if matches_rule:\n            # extract warning from parenthesis\n            warning = line.split('(')[1].split(')')[0]\n            if warning not in ground_truth:\n                continue\n"],time:'2024-09-05T17:40:28.398Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['426','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',''],time:'2024-09-05T17:40:28.430Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['425','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py','plt.show()\n'],time:'2024-09-05T17:40:28.795Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['424','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.825Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['423','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py','plt.legend()\nplt.grid(True)\nplt.show()\n'],time:'2024-09-05T17:40:28.827Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['421','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.842Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['421','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.844Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['417','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.861Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['416','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"for scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.861Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['412','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.875Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['411','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.878Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['408','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.891Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['407','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.894Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['403','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.908Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['402','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.911Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['398','0','424','14','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.925Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['397','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.927Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['394','0','419','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.941Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['393','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.943Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['389','0','414','68','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.958Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['388','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.962Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['384','0','410','12','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.975Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['383','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.979Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['380','0','405','122','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:28.992Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['379','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:28.996Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['375','0','400','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.008Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['374','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.012Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['370','0','396','79','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.025Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['369','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.029Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['366','0','391','52','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.041Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['365','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.045Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['360','0','385','108','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.061Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['359','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.066Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['356','0','382','71','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.075Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['355','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.079Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['351','0','377','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.091Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['351','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.095Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['347','0','372','70','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.108Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['346','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.115Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['342','0','368','91','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.125Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['341','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                            if random.random() < 0.1:\n                                selected_pos = get_positive_predictions(model, rule_numbers)\n                            # Update states\n                            for pos in selected_pos:\n                                warnings_state[pos] = 'positive'\n                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.131Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['340','0','365','90','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.142Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['339','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                            # 0.1 probability to mark all matching warnings as positive/negative\n                            if random.random() < 0.1:\n                                selected_pos = get_positive_predictions(model, rule_numbers)\n                            # Update states\n                            for pos in selected_pos:\n                                warnings_state[pos] = 'positive'\n                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.145Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['339','0','365','90','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.159Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['338','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                            selected_neg = []  # Handle negative case similarly if needed\n\n                            # 0.1 probability to mark all matching warnings as positive/negative\n                            if random.random() < 0.1:\n                                selected_pos = get_positive_predictions(model, rule_numbers)\n                            # Update states\n                            for pos in selected_pos:\n                                warnings_state[pos] = 'positive'\n                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.162Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['340','2','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                          # 0.1 probability to mark all matching warnings as positive/negative\n                            if random.random() < 0.1:\n                                selected_pos = get_positive_predictions(model, rule_numbers)\n                            # Update states\n                            for pos in selected_pos:\n                                warnings_state[pos] = 'positive'\n                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.175Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['342','1','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                               selected_pos = get_positive_predictions(model, rule_numbers)\n                            # Update states\n                            for pos in selected_pos:\n                                warnings_state[pos] = 'positive'\n                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.192Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['344','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                            for pos in selected_pos:\n                                warnings_state[pos] = 'positive'\n                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.209Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['346','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.225Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['351','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.244Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['356','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.259Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['358','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.275Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['359','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            if output:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.292Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['360','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.328Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['361','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.359Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['362','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.376Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['363','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.492Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['364','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.659Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['365','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.693Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['366','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.889Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['340','0','366','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.890Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['341','0','366','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:29.993Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['367','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:29.998Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['342','0','367','48','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.009Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['368','91','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.013Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['342','0','368','91','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.025Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['369','21','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.028Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['343','0','368','91','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.041Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['369','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.044Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['344','0','369','21','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.058Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['370','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.061Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['345','0','370','35','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.075Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['371','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.078Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['345','0','371','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.092Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['372','70','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.095Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['346','0','372','70','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.108Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['373','33','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.111Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['347','0','373','33','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.125Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['373','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.127Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['348','0','373','33','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.141Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['374','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.144Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['349','0','374','82','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.158Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['375','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.161Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['350','0','375','21','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.175Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['376','39','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.178Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['351','0','376','39','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.192Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['377','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.195Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['352','0','377','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.209Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['378','94','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.213Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['353','0','379','86','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.239Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['379','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.244Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['354','0','379','86','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.248Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['380','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.252Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['354','0','380','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.261Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['381','53','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.263Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['355','0','380','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.275Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['381','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.278Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['356','0','381','53','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.292Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['382','71','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.295Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['356','0','382','71','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.308Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['383','76','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.312Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['357','0','383','76','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.325Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['383','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.327Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['358','0','383','76','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.341Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['384','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.344Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['359','0','384','75','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.358Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['385','108','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.361Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['359','0','385','108','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.375Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['386','80','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.378Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['360','0','386','80','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.391Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['387','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.394Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['361','0','386','80','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.408Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['362','0','387','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.425Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['388','65','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.428Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['362','0','388','65','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.441Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['389','27','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.444Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['363','0','389','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.457Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['390','57','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.461Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['364','0','389','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.475Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['390','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"for scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.477Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['365','0','390','57','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.491Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['391','52','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.495Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['365','0','391','52','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.508Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['392','108','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.511Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['366','0','392','108','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.525Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['393','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.527Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['367','0','392','108','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.541Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['368','0','393','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.558Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['394','30','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.561Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['369','0','394','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.575Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['395','26','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.578Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['369','0','395','26','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.591Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['396','79','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.594Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['370','0','395','26','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.608Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['396','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.611Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['371','0','396','79','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.625Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['397','12','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.628Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['372','0','397','12','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.641Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['398','14','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.644Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['372','0','398','14','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.658Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['399','10','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.660Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['373','0','398','14','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.675Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['399','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.677Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['374','0','399','10','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.691Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['400','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.694Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['375','0','400','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.708Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['401','91','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.711Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['375','0','401','91','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.725Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['402','27','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.727Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['376','0','402','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.742Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['402','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.744Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['377','0','402','27','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.758Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['403','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"for scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.761Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['378','0','403','64','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.775Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['404','59','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.777Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['378','0','404','59','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.791Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['405','122','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.794Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['379','0','405','122','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.808Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['406','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.810Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['380','0','405','122','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.825Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['381','0','406','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.841Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['407','30','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.844Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['381','0','407','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.858Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['408','52','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.861Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['382','0','407','30','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.875Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['408','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.877Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['382','0','408','52','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.892Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['409','105','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.894Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['409','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.908Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['383','0','409','105','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T17:40:30.909Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['408','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:30.992Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['407','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:31.292Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['406','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:31.359Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['405','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:31.409Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['404','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:31.460Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['403','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"for scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:31.526Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['402','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:31.593Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['401','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:31.776Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['400','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.626Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['399','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.642Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['398','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.676Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['396','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.725Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['395','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.742Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['394','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.792Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['393','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.808Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['392','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.842Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['391','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.925Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['390','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"for scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:33.975Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['389','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"plt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:34.126Z'},{src:'onDidChangeTextEditorSelection',msg:'%s:%s to %s:%s in [%s] text: %s',prm:['388','0','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py',"# Plot the accuracy over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in accuracy_results.items():\n    for p_value, accuracy_list in p_results.items():\n        plt.plot(range(len(accuracy_list)), accuracy_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Accuracy (%)')\nplt.title('Accuracy over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the percentage of rules over threshold over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in rule_percentage_results.items():\n    for p_value, rule_percentage_list in p_results.items():\n        plt.plot(range(len(rule_percentage_list)), rule_percentage_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Percentage of Rules Over Threshold (%)')\nplt.title('Percentage of Rules Over Threshold over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Plot the conciseness over time for all scenarios and probabilities\nplt.figure(figsize=(12, 6))\nfor scenario_name, p_results in conciseness_results.items():\n    for p_value, conciseness_list in p_results.items():\n        plt.plot(range(len(conciseness_list)), conciseness_list, label=f'{scenario_name} - {p_value}', marker='o')\n\nplt.xlabel('Iteration Number')\nplt.ylabel('Conciseness')\nplt.title('Conciseness over Iterations for Different Scenarios and Probabilities')\nplt.legend()\nplt.grid(True)\nplt.show()\n"],time:'2024-09-05T17:40:34.676Z'}]
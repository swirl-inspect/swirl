[{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['283','0','313','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:31.560Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['275','0','305','51','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:31.591Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['264','0','294','29','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:31.624Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['255','0','285','61','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:31.841Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['247','0','277','59','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:31.857Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['239','0','269','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:31.874Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['225','0','255','51','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:31.908Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['211','0','241','46','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:31.957Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['197','0','227','24','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:32.041Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['189','0','219','58','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:32.275Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['180','0','210','54','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:32.290Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['172','0','202','66','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:32.324Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['158','0','188','51','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:32.357Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['144','0','174','40','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:32.407Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['136','0','166','68','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:32.710Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['127','0','158','24','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:32.891Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['136','0','166','68','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:33.017Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['144','0','174','40','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:33.041Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['152','0','183','44','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:33.074Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['161','0','191','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:33.407Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['152','0','183','44','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:33.957Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['144','0','174','40','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:34.014Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['136','0','166','68','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:34.109Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['127','0','158','24','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:34.232Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['119','0','149','41','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:34.341Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['111','0','141','67','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:34.441Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['102','0','133','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:34.774Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['94','0','124','72','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:34.824Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['86','0','116','72','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:35.150Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['94','0','124','72','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:35:35.556Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['116','72','426','0','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py.git',"\n        elif heuristic == 4:\n            # choose a random heuristic\n            warnings = random.choice([heuristic_shorter_code_first(warnings), heuristic_shared_function_calls(warnings), heuristic_neighbor_classes(warnings, containment)])\n\n    # Sort by code length to identify shortest and longest warnings\n    sorted_warnings_by_length = sorted(warnings, key=lambda x: x[1])\n    \n    # Coin toss to decide whether to pick a positive or negative warning\n    coin_toss = random.choice(['positive', 'negative'])\n    \n    if coin_toss == 'positive':\n        # Select the shortest warning for positive\n        selected_positive_warnings = [sorted_warnings_by_length[0][0]]\n        selected_negative_warnings = []\n        warnings_state[selected_positive_warnings[0]] = 'positive'\n        #print('Coin toss result: Positive selected')\n    else:\n        # Select the longest warning for negative\n        selected_positive_warnings = []\n        selected_negative_warnings = [sorted_warnings_by_length[-1][0]]\n        warnings_state[selected_negative_warnings[0]] = 'negative'\n        #print('Coin toss result: Negative selected')\n    \n    print('Selected positive warning:', selected_positive_warnings)\n    print('Selected negative warning:', selected_negative_warnings)\n    \n    return selected_positive_warnings, selected_negative_warnings\n\n\ndef run_clingo():\n    files = [\n        f'lp/simulation_labels.lp',  \n        'lp/background.lp',              \n        'lp/frozen_rules.lp',            \n        'lp/rules2.lp'                   \n    ]\n    \n    command = ['clingo'] + files + ['--outf=2'] + ['--time-limit=30'] \n    print(' '.join(command))\n    result = subprocess.run(command, capture_output=True, text=True)\n\n    return result.stdout\n\ndef parse_clingo_output(data):\n    # Load the data using json.loads if 'data' is a string,\n    # otherwise assume it's already a dictionary\n    if isinstance(data, str):\n        data = json.loads(data)\n    # Navigate through the JSON structure\n    # Assuming 'Call' is always present and has at least one element\n    calls = data.get(\"Call\", [])\n    if calls:\n        # Assuming 'Witnesses' is always present in the last element of 'Call' and has at least one element\n        last_call = calls[-1]\n        witnesses = last_call.get(\"Witnesses\", [])\n        if witnesses:\n            # Get the last 'Witnesses' entry\n            last_witness = witnesses[-1]\n            # Return the 'Value' list from the last 'Witnesses' entry\n            return last_witness.get(\"Value\", [])\n    return []\n\ndef extract_summary_rules(clingo_output):\n    # a summary rule is one prefixed by rule_contains(number)\n    summary_rules_by_prefix = defaultdict(list)\n    for line in clingo_output:\n        if line.startswith('rule_contains'):\n\n            number_str = line.split('(')[0].split('rule_contains')[1]\n            number = int(number_str) if number_str.isdigit() else 0\n\n            rule = line.split('(')[1].split(')')[0]\n            summary_rules_by_prefix[number].append(rule)\n    return summary_rules_by_prefix\n\ndef calculate_rule_percentage(clingo_output, positive_predictions):\n    summary_rules_by_prefix = defaultdict(list)\n    rule_percentages = {}\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            number_str = line.split('(')[0].split('rule_predict_pos')[1]\n            if number_str == '':\n                number_str = '0'\n            number = int(number_str)\n            warning_number = line.split('(')[1].split(')')[0]\n            summary_rules_by_prefix[number].append(warning_number)\n    for rule_number, matched_warnings in summary_rules_by_prefix.items():\n        rule_percentages[rule_number] = len(set(matched_warnings) & set(positive_predictions)) / len(set(matched_warnings))\n    return rule_percentages\n\ndef number_of_rules_over_percentage(percentages, percentage_threshold=0.8):\n    return sum(1 for p in percentages.values() if p >= percentage_threshold)\n\ndef get_number_of_positive_predictions(clingo_output):\n    positive_predictions = set()\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            warning_number = line.split('(')[1].split(')')[0]\n            positive_predictions.add(warning_number)\n    return len(positive_predictions)\n\n\ndef get_positive_predictions(clingo_output, rule_numbers):\n    # rule_predict_pos<number>(<warning>)\n    positive_predictions = []\n    for line in clingo_output:\n        if line.startswith('rule_predict_pos'):\n            number_str = line.split('(')[0].split('rule_predict_pos')[1]\n            number = int(number_str) if number_str.isdigit() else 0\n            if number not in rule_numbers:\n                continue\n            # extract warning from parenthesis\n            warning = line.split('(')[1].split(')')[0]\n            if warning not in ground_truth:\n                continue\n            positive_predictions.append(warning)\n    return positive_predictions\n\ndef get_positive_predictions_of_rule(clingo_output, rule_number):\n    # rule_predict_pos<number>(<warning>)\n    positive_predictions = []\n    for line in clingo_output:\n        matches_rule = line.startswith(f'rule_predict_pos{rule_number}') if rule_number != 0 else line.startswith('rule_predict_pos')\n        if matches_rule:\n            # extract warning from parenthesis\n            warning = line.split('(')[1].split(')')[0]\n            if warning not in ground_truth:\n                continue\n            positive_predictions.append(warning)\n    return positive_predictions\n\n# Simulation driver code\n\n# Parameters for the simulation\nwarning_type = sys.argv[1]\nground_truth_file = sys.argv[2]\n\n# Read ground_truth data\nground_truth = read_ground_truth(ground_truth_file)\n\ngraph_id_to_warning = {}\nwith open('meteor_app/private/original_graphs/' + warning_type + '_graph_id_mapping.txt', 'r') as file:\n    for line in file:\n        graph_id = line.split(',')[1]\n        example_id = line.split(',')[2].split(' - ')[0]\n        graph_id_to_warning[graph_id] = example_id\n\n# Load code data from JSON\nwith open('meteor_app/private/original_graphs/' + warning_type + '_elementpositions.json', 'r') as file:\n    code_content_data = json.load(file)\n\ncode_data = {}\n\nfor graph_id_str, another_json_str in code_content_data.items():\n    warning_data = json.loads(another_json_str)\n\n    # Code length\n    raw_code = warning_data.get(\"rawCode\", \"\")\n    raw_code_length = len(raw_code.splitlines())\n    try:\n        warning_id = int(graph_id_to_warning[graph_id_str])\n    except:\n        continue\n\n    code_data[warning_id] = {}\n\n    code_data[warning_id]['linesOfCode'] = raw_code_length\n\n    # Find all code expressions that look like function calls\n    function_calls = [expression for expression in warning_data['expressionStart'].keys() if '()' in expression and '->' not in expression]\n\n    code_data[warning_id]['functionCalls'] = function_calls\n\n# Scenarios: 1 = Heuristic 1, 2 = Heuristic 2, 3 = Heuristic 3, 4 = All Heuristics\nscenarios = {\n    'Heuristic 1 Only': [1]\n    #'Heuristic 2 Only': [2],\n    #'Heuristic 3 Only': [3],\n    #'All Heuristics': [4]\n}\n\n# Store the accuracy, rule percentage, and conciseness results for each scenario\naccuracy_results = {key: {'p=0': [], 'p=0.5': [], 'p=1': []} for key in scenarios.keys()}\nrule_percentage_results = {key: {'p=0': [], 'p=0.5': [], 'p=1': []} for key in scenarios.keys()}\nconciseness_results = {key: {'p=0': [], 'p=0.5': [], 'p=1': []} for key in scenarios.keys()}\n\n\n# Run simulations for each scenario\nfor scenario_name, heuristics in scenarios.items():\n    for p_value in [0, 0.5, 1]:\n        print(f\"Running scenario: {scenario_name} with p={p_value}\")\n\n        warnings_state = initialize_warnings_state(ground_truth)\n        num_warnings = len(ground_truth)\n\n        output = run_clingo()\n\n        # get the first warning\n        selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, initialize_warnings_state(ground_truth), apply_heuristics=heuristics)\n        for pos in selected_pos:\n            warnings_state[pos] = 'positive'\n\n        # Run simulation for # of warnings iterations\n        rule_percentage = 0\n        conciseness = 0\n        accuracy = 0\n        for iteration in range(num_warnings - 1):\n            print(f'Simulation Iteration {iteration} for {scenario_name} with p={p_value}')\n\n            if p_value == 1:\n                # Use the rules to select positive/negative warnings\n                if output:\n                    model = parse_clingo_output(output)\n                    rule_numbers = list(extract_summary_rules(model).keys())\n                    if rule_numbers:\n                        selected_pos = get_positive_predictions_of_rule(model, random.choice(rule_numbers))\n                        selected_neg = []  # Handle negative case similarly if needed\n\n                        # 0.1 probability to mark all matching warnings as positive/negative\n                        if random.random() > 0.1:\n                            selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n                        for pos in selected_pos:\n                                warnings_state[pos] = 'positive'\n            elif p_value == 0.5:\n                # 50% chance to use the rules or the original heuristic-based sampling\n                if random.random() < 0.5:\n                    if output:\n                        model = parse_clingo_output(output)\n                        rule_numbers = list(extract_summary_rules(model).keys())\n                        if rule_numbers:\n                            selected_pos = get_positive_predictions_of_rule(model, random.choice(rule_numbers))\n                            selected_neg = []  # Handle negative case similarly if needed\n\n                            # 0.1 probability to mark all matching warnings as positive/negative\n                            if random.random() > 0.1:\n                                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n                            for pos in selected_pos:\n                                    warnings_state[pos] = 'positive'\n                else:\n                    selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n            else:\n                # p=0, just use the original heuristic-based sampling\n                selected_pos, selected_neg = sample_labels_randomized_then_sorted(ground_truth, 1, 1, code_data, warnings_state, apply_heuristics=heuristics)\n\n            # Write labels to Clingo input and run Clingo\n            pos_labels = [k for k, v in warnings_state.items() if v == 'positive']\n            neg_labels = [k for k, v in warnings_state.items() if v == 'negative']\n            write_labels_to_clingo_input(pos_labels, neg_labels)\n            output = run_clingo()\n\n            if output and p_value != 0:\n                model = parse_clingo_output(output)\n                inferred_rules = extract_summary_rules(model)\n                percentages = calculate_rule_percentage(model, pos_labels)\n                num_rules_over_threshold = number_of_rules_over_percentage(percentages)\n                num_rules = len(inferred_rules)\n                number_of_positive_predictions = get_number_of_positive_predictions(model)\n\n                if num_rules_over_threshold > 0:\n                    conciseness = number_of_positive_predictions / num_rules_over_threshold\n                else:\n                    conciseness = 0\n\n                # Calculate the percentage of rules over the threshold\n                if num_rules > 0:\n                    rule_percentage = (num_rules_over_threshold / num_rules) * 100\n                else:\n                    rule_percentage = 0\n\n                rule_percentage_results[scenario_name][f'p={p_value}'].append(rule_percentage)\n                conciseness_results[scenario_name][f'p={p_value}'].append(conciseness)\n\n            # Calculate accuracy after each iteration\n            accuracy = calculate_accuracy(warnings_state, ground_truth)\n            accuracy_results[scenario_name][f'p={p_value}'].append(accuracy)\n            print(f'Accuracy after iteration {iteration}: {accuracy:.2f}%')\n            print(f'Percentage of rules over threshold after iteration {iteration}: {rule_percentage:.2f}%')\n            print(f'Conciseness after iteration {iteration}: {conciseness:.2f}')\n\n# Save the results to a csv file\nwith open(warning_type + '_simulation_results.csv', 'w') as f:\n    f.write('Scenario,Probability,Iteration,Accuracy,Rule Percentage,Conciseness\\n')\n    for scenario_name, p_results in accuracy_results.items():\n        for p_value, accuracy_list in p_results.items():\n            rule_percentage_list = rule_percentage_results[scenario_name][p_value]\n            conciseness_list = conciseness_results[scenario_name][p_value]\n            for i in range(len(accuracy_list)):\n                f.write(f'{scenario_name},{p_value},{i},{accuracy_list[i]},{rule_percentage_list[i]},{conciseness_list[i]}\\n')"],time:'2024-09-05T21:35:44.242Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','0','0','0','git/scm0/input','o'],time:'2024-09-05T21:35:44.932Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','1','0','1','git/scm0/input','p'],time:'2024-09-05T21:35:45.068Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','2','0','2','git/scm0/input','t'],time:'2024-09-05T21:35:45.239Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','3','0','3','git/scm0/input','i'],time:'2024-09-05T21:35:45.300Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','4','0','4','git/scm0/input','m'],time:'2024-09-05T21:35:45.531Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','5','0','5','git/scm0/input','i'],time:'2024-09-05T21:35:45.732Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','6','0','6','git/scm0/input','z'],time:'2024-09-05T21:35:45.821Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','7','0','7','git/scm0/input','e'],time:'2024-09-05T21:35:46.099Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','8','0','8','git/scm0/input','d'],time:'2024-09-05T21:35:46.260Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','9','0','9','git/scm0/input',' '],time:'2024-09-05T21:35:46.352Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','10','0','10','git/scm0/input','s'],time:'2024-09-05T21:35:46.687Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','11','0','11','git/scm0/input','i'],time:'2024-09-05T21:35:46.730Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','12','0','12','git/scm0/input','m'],time:'2024-09-05T21:35:47.002Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','13','0','13','git/scm0/input',' '],time:'2024-09-05T21:35:47.119Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','14','0','14','git/scm0/input','a'],time:'2024-09-05T21:35:47.218Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','15','0','15','git/scm0/input','n'],time:'2024-09-05T21:35:47.286Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','16','0','16','git/scm0/input','d'],time:'2024-09-05T21:35:47.511Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','17','0','17','git/scm0/input',' '],time:'2024-09-05T21:35:47.551Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','18','0','18','git/scm0/input','t'],time:'2024-09-05T21:35:49.062Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','19','0','19','git/scm0/input','a'],time:'2024-09-05T21:35:49.307Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','20','0','20','git/scm0/input','b'],time:'2024-09-05T21:35:49.370Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','21','0','21','git/scm0/input','l'],time:'2024-09-05T21:35:49.620Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','22','0','22','git/scm0/input','e'],time:'2024-09-05T21:35:49.704Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','23','0','23','git/scm0/input',' '],time:'2024-09-05T21:35:49.829Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','24','0','24','git/scm0/input','o'],time:'2024-09-05T21:35:50.543Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','25','0','25','git/scm0/input','u'],time:'2024-09-05T21:35:50.736Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','26','0','26','git/scm0/input','t'],time:'2024-09-05T21:35:50.826Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','27','0','27','git/scm0/input','p'],time:'2024-09-05T21:35:50.969Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','28','0','28','git/scm0/input','u'],time:'2024-09-05T21:35:51.391Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','29','0','29','git/scm0/input','t'],time:'2024-09-05T21:35:51.438Z'},{src:'onDidChangeTextDocument',msg:'%s:%s to %s:%s in [%s] replaced with: %s`',prm:['0','0','0','30','git/scm0/input',''],time:'2024-09-05T21:35:52.832Z'},{src:'onDidChangeActiveTerminal',msg:'Current terminal: [%s]; Previous terminal: [%s]',prm:['Python','node'],time:'2024-09-05T21:35:59.962Z'},{src:'onDidChangeTextEditorVisibleRanges',msg:'%s:%s to %s:%s [%s]',prm:['102','0','133','9','/Users/burakyetistiren/Desktop/warning_suppression/code/simulate.py'],time:'2024-09-05T21:56:19.308Z'}]